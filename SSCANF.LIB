/*** BeginHeader  ********************************************/
#ifndef __SSCANF_LIB
#define __SSCANF_LIB
/*** EndHeader ***********************************************/

/* START LIBRARY DESCRIPTION *********************************************
SSCANF.LIB
	Copyright (c) 2002, SHDesigns, www.shdesigns.org

	Updated 6-08-2004 to support whitespace in format string.
DESCRIPTION:
	String conversion.

SUPPORT LIB'S:
END DESCRIPTION **********************************************************/

/* START FUNCTION DESCRIPTION ********************************************
htol                       <SSCANF.LIB>

SYNTAX: long int htol(char *s);

PARAMETER1: Character string to convert

KEYWORDS: convert

DESCRIPTION: Hex String to long int conversion.  "s" is the string to convert,

RETURN VALUE:	long integer.
END DESCRIPTION **********************************************************/
/*** BeginHeader  htol */

long int htol(char * s);

/*** EndHeader */

long int htol(char *s)
{
	long int t;
	char neg;
	neg=0;
	t=0;
 if (*s=='-') {s++; neg=1;}
 while (isxdigit(*s))
  { t<<=4;
    if (isalpha(*s))
	  { t|=(toupper(*s)-'7')&0xf;
	  	 s++; }
	  else
	  t|=(*s++-'0')&0xf;
	}
    if (neg) return(-t); else return(t);
}

/*** BeginHeader  sscanf */

int sscanf(char *s, char *fmt,...);

/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
sscanf                       <SSCANF.LIB>

SYNTAX: int sscanf(char *s, char * fmt,...);

PARAMETER1: Character string to parse

PARAMETER2: Format string

PARAMETER3..n: pointer(s) to values to store

KEYWORDS: convert

DESCRIPTION: ANSI String Conversion.  "s" is the string to convert,
format is smilar to printf format strings. The allowable foramt
specifications are:

%d - integer
%u - unsigned int
%ld - long integer
%f - float
%c - character
%x - hex integer
%lx - hex long integer
%s  - string

Whitespace characters in the input are skipped.  Any other characters in the
fmt string are matched with the input string. Example:

sscanf(s,"%d:%d",&hour,&min);

will convert integer and store in hour, look for the ':' char, then
convert the next integer and store in min. Note: whitespace is skipped
so " 12 : 32" would convert sucessfully
#define SSCANF_AUTO to make the function reentrant

RETURN VALUE:	The number of parameters successfully converted.

END DESCRIPTION **********************************************************/

#ifdef SSCANF_AUTO
#define __ss_auto auto
#else
#define __ss_auto
#endif

nodebug char * skipwt(char * s)
{
	while (isspace(*s))		/* ignore white space */
	{
		if (*s=='\0')
			return s;
		s++;
	}
	return s;
}

int _sscanf(char * line,char *fmts,unsigned int ** args)
{
  __ss_auto char longf,signed;
  __ss_auto long param;
  __ss_auto long * lptr;
  __ss_auto float *fptr,ftmp;
  __ss_auto int argcnt;
  char * s;
  argcnt=0;
  while (*fmts!='\0')
  {
   	if (*fmts!='%')
   	{
   		while ((*fmts!='\0')&&(*fmts!='%'))
   		if (isspace(*fmts))
   		{
   			fmts++;
   		  	line=skipwt(line);
   		}
   		else
   		if (*fmts==*line)
   		{
   			fmts++;
   			line++;
	   	}
	  		else
	  			return argcnt;	// did not find next char
   	}
   	if (*fmts=='%')
   	{
	  		line=skipwt(line);
   		fmts++;
   		if (*fmts=='l')
   		{
   			longf=1;
   			fmts++;
   		}
   		else
   			longf=0;
			signed=1;
  			switch (*fmts)
			{
			case '%':
				if (*line!='%')
					return argcnt;
				fmts++;
				line++;
				break;
			case 'f':
				fmts++;
				fptr=(float *)args[argcnt++];
				*fptr=strtod(line,&line);
				break;
			case 'x': fmts++;
				param=htol(line);
				if (longf)
				{
					lptr=(long *)args[argcnt];
					*lptr=param;
				}
				else
					*((int * ) args[argcnt])=(int)param;
				if (*line=='-') line++;
				if (!isxdigit(*line))
					return argcnt;
				while (isxdigit(*line))
					line++;
				argcnt++;
				break;
			case 'u':
				signed=0;
			case 'd':
		   	fmts++;
				param=atol(line);	/* convert digits to int */
				if (longf)
				{
					lptr=(long *)args[argcnt];
					*lptr=param;
				}
				else
				if (signed)
					*((int * ) args[argcnt])=(int)param;
				else
					*((unsigned int * ) args[argcnt])=(unsigned int)param;
				if (*line=='-') line++;
				if (!isdigit(*line))
					return argcnt;
				while (isdigit(*line))
					line++;
				argcnt++;
				break;
			case 'c': fmts++;
	      	if (*line=='\0') return(argcnt);
				*((char *)args[argcnt++])=*line++;
				break;
   		case 's': fmts++;
      		if (*line=='\0') return(argcnt);
            s=(char *)args[argcnt];
	      	while ((isspace(*line)==0) && (*line != 0))
//            *(((char*)args[argcnt])++)=*line++;
					*s++=*line++;
            *s='\0';
   	   	argcnt++;
      		break;
			default:
				 fmts++;
			}
		}
	}
   return(argcnt);
}

int sscanf(char * line,char * fmts,void * args,...)

{ return(_sscanf(line,fmts,(unsigned int * *)&args));
}
//
/*** BeginHeader  ********************************************/
#endif
/*** EndHeader ***********************************************/